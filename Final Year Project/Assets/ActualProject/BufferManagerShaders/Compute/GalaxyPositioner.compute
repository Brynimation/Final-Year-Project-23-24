#pragma kernel CSMain
#include "Assets/ActualProject/Helpers/Utility.hlsl"
#include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/Core.hlsl"
#include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/Lighting.hlsl"

float lodSwitchDist;
float galaxyFadeDist;
float3 playerPosition;
float dontSpawnRadius;

float2 minMaxMinimumEccentricity;
float2 minMaxMaximumEccentricity;

float2 minMaxAngularOffsetMultiplier;

float2 minMaxHaloRadius;
float2 minMaxBulgeRadius;
float2 minMaxDiskRadius;
float2 minMaxDensity;

int2 minMaxNumParticles;

float4 centreColours[8];
float4 outerColours[8];

RWStructuredBuffer<ChunkIdentifier> _ChunksBuffer;
AppendStructuredBuffer<GalaxyProperties> _MainProperties;
AppendStructuredBuffer<GalaxyProperties> _Properties4;
RWStructuredBuffer<TriggerChunkIdentifier> _TriggerBuffer;
RWStructuredBuffer<Plane> _ViewFrustumPlanes;
RWStructuredBuffer<Plane> _ViewFrustumPlanesAtTrigger;
RWStructuredBuffer<float> _Radii;

//We need the radius look up texture here, as the radius of the outermost particle in a galaxy may not correspond exactly to the _GalacticHaloRadius
//(ie, all particles may fall strictly WITHIN the halo.)
//So we need this texture to find the radius of the outermost particle and use this to determine the size of the billboard.
uniform Texture2D<float> _RadiusLookupTexture;
uniform SamplerState sampler_RadiusLookupTexture;

//View frustum culling of a sphere. Tutorial used: https://www.lighthouse3d.com/tutorials/view-frustum-culling/
uint ShouldCullSphere(float3 centre, float radius)
{

    for (uint i = 0; i < 6; i++)
    {
        Plane plane = _ViewFrustumPlanes[i];
        float normalDotCentre = dot(plane.normal, centre);
        float cullDist = plane.distance;
        if (normalDotCentre + cullDist + radius <= 0)
        {
            return 0;
        }
    }
    return 1;
}


float GetFinalRadius()
{
    float p = 1.0;
    float radius = _RadiusLookupTexture.SampleLevel(sampler_RadiusLookupTexture, float2(p, 0.0), 0).r;
    _Radii[0] = radius;
    return radius;
}


[numthreads(8, 8, 8)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    if (_ChunksBuffer[0].chunkType != 3)
        return;
    if (id.x >= _ChunksBuffer[0].chunksInViewDist || id.y >= _ChunksBuffer[0].chunksInViewDist || id.z >= _ChunksBuffer[0].chunksInViewDist)
        return;
    int currentChunkCoordX = round(playerPosition.x / float(_ChunksBuffer[0].chunkSize));
    int currentChunkCoordY = round(playerPosition.y / float(_ChunksBuffer[0].chunkSize));
    int currentChunkCoordZ = round(playerPosition.z / float(_ChunksBuffer[0].chunkSize));

    int curXOffset = -round(_ChunksBuffer[0].chunksInViewDist/2) + currentChunkCoordX + id.x; 
    int curYOffset = -round(_ChunksBuffer[0].chunksInViewDist/2) + currentChunkCoordY + id.y; 
    int curZOffset = -round(_ChunksBuffer[0].chunksInViewDist/2) + currentChunkCoordZ + id.z; 

    int3 viewedChunkCoord = int3(curXOffset, curYOffset, curZOffset);
    uint width;
    uint height;

    float3 actualPosition = viewedChunkCoord * _ChunksBuffer[0].chunkSize;

    int chunkIndex = ChunkTypeToIndex(3);
    TriggerChunkIdentifier tid = _TriggerBuffer[chunkIndex];
    float3 triggerPos = tid.cid.pos;
    float3 dir = normalize(triggerPos - actualPosition);

    if (distance(triggerPos, actualPosition) <= dontSpawnRadius && tid.entered == 1u)return; //We don't want the player to spawn inside any bodies when they enter a new level'

    //don't spawn galaxies behind the player if we just entered the intergalactic layer from the galactic cluster scale'
    if (tid.entered == 1u && dot(tid.cameraForward, dir) > 0.0)
    {
        return;
    }
        
    
    float dist = length(actualPosition - playerPosition);


    float random = Hash31(actualPosition);
    float random2 = Hash1(random);
    float random3 = Hash1(random2 * 123.12 + random * 654.21);
    float scale = lerp(minMaxHaloRadius.x, minMaxHaloRadius.y, random);
    
    if (ShouldCullSphere(actualPosition, scale) == 0u)
        return; // view frustum culling
    
    float lodDist = lodSwitchDist * max(1.0, scale) + galaxyFadeDist;
    float fade = CrossFade(playerPosition, actualPosition, 10000.0, lodDist, galaxyFadeDist);
    float4 colour = lerp(float4(1.0, 0.0, 0.0, 1.0), float4(0.0, 0.0, 1.0, 1.0), random);
    float3 rotation = Hash33(actualPosition) * 2.0 * PI;
    MeshProperties mp = GenerateMeshProperties(actualPosition, rotation, scale, _ChunksBuffer[0].chunkType, colour, fade);

    float minEccentricity = lerp(minMaxMinimumEccentricity.x, minMaxMinimumEccentricity.y, random);
    float maxEccentricity = lerp(minMaxMaximumEccentricity.x, minMaxMaximumEccentricity.y, random);
    float haloRadius = scale;
    float bulgeRadius = lerp(minMaxBulgeRadius.x, minMaxBulgeRadius.y, random2);
    float diskRadius = lerp(minMaxDiskRadius.x, minMaxDiskRadius.y, random2);
    int angularOffsetMultiplier = round(lerp(minMaxAngularOffsetMultiplier.x, minMaxAngularOffsetMultiplier.y, random3));
    int numParticles = lerp(minMaxNumParticles.x, minMaxNumParticles.y, random2);
    float galaxyDensity = lerp(minMaxDensity.x, minMaxDensity.y, random);

    int randomToIndex1 = floor(random2 * 8.0);
    int randomToIndex2 = floor(random3 * 8.0);
    float4 centreColour = centreColours[randomToIndex1];
    float4 outerColour = outerColours[randomToIndex2];
    //We want to check if a given position is behind the trigger position

    //If we just moved down from the galactic cluster scale, then we only spawn points (galaxies) in front of the player
    



    GalaxyProperties gp = GenerateGalaxyProperties(mp, minEccentricity, maxEccentricity, haloRadius, bulgeRadius, diskRadius, angularOffsetMultiplier, numParticles, minMaxHaloRadius.y, galaxyDensity, centreColour, outerColour);
    
    if (dist < lodDist)
    {
        _MainProperties.Append(gp);
    }
    float finalGalaxySwitchDist = lodSwitchDist * max(1.0, scale);
    if (dist > finalGalaxySwitchDist)
    {
        //Start fading the sprites 
        mp.fade = CrossFade(playerPosition, actualPosition, finalGalaxySwitchDist + galaxyFadeDist, 10000.0, galaxyFadeDist);
        haloRadius = (mp.scale/minMaxHaloRadius.y) *  GetFinalRadius();
        GalaxyProperties gp = GenerateGalaxyProperties(mp, minEccentricity, maxEccentricity, haloRadius, bulgeRadius, diskRadius, angularOffsetMultiplier, numParticles, minMaxHaloRadius.y, galaxyDensity, centreColour, outerColour);
        _Properties4.Append(gp);
    }

}

