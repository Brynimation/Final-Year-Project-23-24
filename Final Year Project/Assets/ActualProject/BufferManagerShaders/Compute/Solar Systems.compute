#pragma kernel CSMain
#include "Assets/ActualProject/Helpers/Utility.hlsl"
float solarSystemSwitchDist;
float dontSpawnRadius;
float3 playerPosition;

RWStructuredBuffer<ChunkIdentifier> _ChunksBuffer;
RWStructuredBuffer<int> _SolarSystemCount;
RWStructuredBuffer<TriggerChunkIdentifier> _TriggerBuffer;
RWStructuredBuffer<Plane> _ViewFrustumPlanes;
RWStructuredBuffer<Plane> _ViewFrustumPlanesAtTrigger;
AppendStructuredBuffer<SolarSystem> _SolarSystems; 
AppendStructuredBuffer<SolarSystem> _LowLODSolarSystems;
AppendStructuredBuffer<Planet> _Planets;
AppendStructuredBuffer<float> _RandomValuesBuffer;
float time;
float fadeDist;
float timeStep;

float minLuminosity;
float maxLuminosity;

float minRadius;
float maxRadius;

float minWavelength;
float maxWavelength;

float2 minMaxRotationSpeed;

float4 colours[6];
float4 emissiveColours[6];
float4 borderColours[6];
float4 probabilities[6];

float4 oceanColours[4];
float4 groundColours[4];
float4 mountainColours[4];
float4 mountainTopColours[4];


//View frustum culling of a sphere. Tutorial used: https://www.lighthouse3d.com/tutorials/view-frustum-culling/

uint ShouldCullSphere(float3 centre, float radius)
{

    for (uint i = 0; i < 6; i++)
    {
        Plane plane = _ViewFrustumPlanes[i];
        float normalDotCentre = dot(plane.normal, centre);
        float cullDist = plane.distance;
        if (normalDotCentre + cullDist + radius <= 0)
        {
            return 0;
        }
    }
    return 1;
}

[numthreads(8, 8, 8)]
void CSMain(uint3 id : SV_DispatchThreadID) {
    if (_ChunksBuffer[0].chunkType != 2)
        return;
    if(id.x >= _ChunksBuffer[0].chunksInViewDist || id.y >= _ChunksBuffer[0].chunksInViewDist || id.z >= _ChunksBuffer[0].chunksInViewDist) return;
    int currentChunkCoordX = round(playerPosition.x / float(_ChunksBuffer[0].chunkSize));
    int currentChunkCoordY = round(playerPosition.y / float(_ChunksBuffer[0].chunkSize));
    int currentChunkCoordZ = round(playerPosition.z / float(_ChunksBuffer[0].chunkSize));

    int curXOffset = -round(_ChunksBuffer[0].chunksInViewDist/2) + currentChunkCoordX + id.x; 
    int curYOffset = -round(_ChunksBuffer[0].chunksInViewDist/2) + currentChunkCoordY + id.y; 
    int curZOffset = -round(_ChunksBuffer[0].chunksInViewDist/2) + currentChunkCoordZ + id.z; 

    int3 viewedChunkCoord = int3(curXOffset, curYOffset, curZOffset);
    uint width;
    uint height;

    float3 actualPosition = viewedChunkCoord * _ChunksBuffer[0].chunkSize;
    int index = ChunkTypeToIndex(2);
    float3 triggerPos = _TriggerBuffer[index].cid.pos;
    if(distance(triggerPos, actualPosition) <= dontSpawnRadius) return; //We don't want the player to spawn inside any bodies when they enter a new level'
    

    float dist = length(actualPosition - playerPosition);
    float lodDist = solarSystemSwitchDist + fadeDist;


    float random = Hash31(actualPosition);
    float random2 = Hash31(random);
    float random3 = Hash31(random * 456.98 + random2 * 123.12);

    for(int i = 0; i < 6; i++)
    {
        _RandomValuesBuffer.Append(probabilities[i]);
    }

    float scale =  lerp(minRadius, maxRadius, random);
    float planetMaxDist = scale * 2.0;
    
    
    //We may want to render planets orbitting a star even if we can't see the star, so do not return immediately.
    uint renderStar = ShouldCullSphere(actualPosition, scale + 1.0);
    
    float smoothRand = pNoise(actualPosition);
    float starLuminosity = weightedRandomSample(random);
    float4 colour = GenerateRandomColour(random2, colours, probabilities);
    float4 emissiveColour = GenerateRandomColour(random2, emissiveColours, probabilities);
    float4 borderColour = GenerateRandomBorderColour(random2, borderColours, probabilities, random2);
    float borderWidthMultiplier = lerp(0.5, 2.0, random3);
    float3 rotation = Hash33(actualPosition) * 2.0 * PI;
    float fade = CrossFade(playerPosition, actualPosition, -1.0, lodDist, fadeDist);


    //only spawn stars in front of the player if they've entered this scale, so that it is clear how to return to a higher scale.
    float3 dir = normalize(_TriggerBuffer[index].cid.pos - actualPosition);
    if (_TriggerBuffer[index].entered == 1u && dot(_TriggerBuffer[index].cameraForward, dir) > 0.0)
    {
        return;
    }
    SolarSystem system = (SolarSystem)0;
    system.star.starPosition = actualPosition;
    system.star.borderColour = borderColour;
    system.star.borderWidthMultiplier = borderWidthMultiplier;
    system.star.starRadius = scale;
    system.star.starLuminosity = starLuminosity;
    system.star.starMass = calculateSphereMass(system.star.starRadius, 1.0);
    system.star.starColour = colour;
    system.star.emissiveColour = emissiveColour;
    system.fade = fade;
    system.planetCount = ceil(10 * random);
    if (dist < lodDist)
    {
        if (renderStar == 1u)
        {
            _SolarSystems.Append(system);
        }


        for(int i = 0; i < system.planetCount; i++)
        {
            float3 planetId = (float3) viewedChunkCoord;
            planetId.x += i;
            float planetRandom = Hash31(planetId);
            float planetRandom2 = Hash1(planetRandom);
            float planetRandom3 = Hash1(planetRandom * 123.43 + planetRandom2 * 897.12);
            
            Planet planet = (Planet)0;

            //Give the planet an elliptical orbit
            planet.radius = lerp(0.1, 0.4, planetRandom);
            float semiMajorAxis = (system.star.starRadius + planet.radius) + planetMaxDist * planetRandom;
            float eccentricity = Hash1(planetRandom); //in range (0, 1)
            float semiMinorAxis = semiMajorAxis * sqrt(1 - pow(eccentricity, 2.0));
            
            //calculate angular velocity and current position
            float initialAngle = (float(i)/float(system.planetCount)) * 2.0 * PI;
            float angle = initialAngle + CalculatePlanetAngularVelocity(semiMajorAxis, system.star.starMass, 1.0) * time * timeStep * 0.25;
            float x = semiMajorAxis * cos(angle);
            float z = semiMinorAxis * sin(angle);
            planet.position = actualPosition + float3(x, 0, z);

            // view frustum culling

            uint renderPlanet = ShouldCullSphere(planet.position, planet.radius); 
            if (renderPlanet == 0u) continue;

            //assign properties
            planet.mass = calculateSphereMass(planet.radius, 1.0);
            planet.colour = float4(0.8, 0.1, 0.4, 1.0);
            planet.rotationSpeed = lerp(minMaxRotationSpeed.x, minMaxRotationSpeed.y, planetRandom3) * time * timeStep;
            planet.rotationAxis = float3(0.0, 1.0, 0.0);
            planet.primaryBody = system.star;
            PlanetTerrainProperties planetProperties = (PlanetTerrainProperties) 0;
            planetProperties.baseRoughness = lerp(2.0, 6.0, planetRandom);
            planetProperties.roughness = lerp(1.0, 3.0, planetRandom2);
            planetProperties.persistence = lerp(0.25, 0.75, planetRandom3);
            planetProperties.octaves = ceil(lerp(1, 8, planetRandom2));
            planetProperties.minVal = lerp(0.0, 0.5, planetRandom);
            planetProperties.noiseCentre = lerp(float3(0.0, 0.0, 0.0), float3(32.0, 11.5, 17.2), planetRandom3);
            planetProperties.noiseStrength = lerp(0.5, 1.5, planetRandom);
            
            int randomToIndex = floor(Hash1(planetRandom) * 4);
            int randomToIndex2 = floor(Hash1(planetRandom2) * 4);
            int randomToIndex3 = floor(Hash1(planetRandom3) * 4);
            PlanetTerrainColours colours = (PlanetTerrainColours) 0;
            
            colours.colours[0] = oceanColours[randomToIndex];
            colours.colours[1] = groundColours[randomToIndex2];
            colours.colours[2] = mountainColours[randomToIndex3];
            colours.colours[3] = mountainTopColours[randomToIndex];
            
            planetProperties.colours = colours;
            planet.properties = planetProperties;

            _Planets.Append(planet);
        }
    }
    if (dist > solarSystemSwitchDist && renderStar == 1u)
    {
    
        _LowLODSolarSystems.Append(system);
    }
}