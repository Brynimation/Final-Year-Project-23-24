// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain
#include "Assets/ActualProject/Helpers/Utility.hlsl"



AppendStructuredBuffer<GalacticCluster> _GalacticClusterBuffer;

RWStructuredBuffer<uint> _DispatchBuffer;
RWStructuredBuffer<ChunkIdentifier> _ChunksBuffer;
RWStructuredBuffer<ChunkIdentifier> _ChunksBufferPrevFrame;
RWStructuredBuffer<TriggerChunkIdentifier> _TriggerBuffer;
AppendStructuredBuffer<float3> _ChunkOffset;
RWStructuredBuffer<float3> _ActualPosition;
float renderDistance;
float lodSwitchDist;
float galaxyFadeDist;
float solarSystemSwitchDist;
float galaxySwitchDist;
float dontSpawnRadius; //We don't want to spawn any bodies on the trigger - things get too confusing.
int chunkSize;
float3 playerPosition;
int3 playerChunkCoord;
int chunksVisibleInViewDist;
int originalChunksVisibleInViewDist;

//Going back up a level
bool goBack;
float lodSwitchBackDist;
float3 cameraForward;

float minLuminosity;
float maxLuminosity;

float minRadius;
float maxRadius;

float minWavelength;
float maxWavelength;

float4 colours[6];

//GalaxyProperties
float2 minMaxMinimumEccentricity;
float2 minMaxMaximumEccentricity;

float2 minMaxAngularOffsetMultiplier;

float2 minMaxHaloRadius;
float2 minMaxBulgeRadius;
float2 minMaxDiskRadius;

int2 minMaxNumParticles;
RWStructuredBuffer<Plane> _ViewFrustumPlanes;
RWStructuredBuffer<Plane> _ViewFrustumPlanesAtTrigger;
bool switched;

//Galactic cluster properties 
float2 galacticClusterMinMaxRadius;
float2 galacticClusterMinMaxStarSize;
float2 minMaxStarSpeedMultiplier;
float2 minMaxNumStarLayers;
float2 minMaxGridSize;

float4 clusterColours[6];

//View frustum culling of a sphere. Tutorial used: https://www.lighthouse3d.com/tutorials/view-frustum-culling/
uint ShouldCullSphere(float3 centre, float radius)
{

    for (uint i = 0; i < 6; i++)
    {
        Plane plane = _ViewFrustumPlanes[i];
        float normalDotCentre = dot(plane.normal, centre);
        float cullDist = plane.distance;
        if (normalDotCentre + cullDist + radius <= 0)
        {
            return 0;
        }
    }
    return 1;
}

uint IntersectSphereAtTrigger(float3 centre, float radius)
{
    for (uint i = 0; i < 6; i++)
    {
        Plane plane = _ViewFrustumPlanesAtTrigger[i];
        float normalDotCentre = dot(plane.normal, centre);
        float cullDist = plane.distance * 10000;
        if (normalDotCentre + cullDist + radius <= 0)
        {
            return 0;
        }
    }
    return 1;
}

[numthreads(8, 8, 8)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    //chunksBuffer[0].chunkType stores the scale of the level currently being viewed
    if (id.x >= _ChunksBuffer[0].chunksInViewDist || id.y >= _ChunksBuffer[0].chunksInViewDist || id.z >= _ChunksBuffer[0].chunksInViewDist)
        return;
    bool localSwitch = false;
    
    //Convert player position to chunk space
    int currentChunkCoordX = round(playerPosition.x / float(_ChunksBuffer[0].chunkSize));
    int currentChunkCoordY = round(playerPosition.y / float(_ChunksBuffer[0].chunkSize));
    int currentChunkCoordZ = round(playerPosition.z / float(_ChunksBuffer[0].chunkSize));
    int3 playerChunkCoord = int3(currentChunkCoordX, currentChunkCoordY, currentChunkCoordZ);

    //Compute chunk space position of the current chunk
    int curXOffset = -round(_ChunksBuffer[0].chunksInViewDist / 2) + currentChunkCoordX + id.x;
    int curYOffset = -round(_ChunksBuffer[0].chunksInViewDist / 2) + currentChunkCoordY + id.y;
    int curZOffset = -round(_ChunksBuffer[0].chunksInViewDist / 2) + currentChunkCoordZ + id.z;
    int3 viewedChunkCoord = int3(curXOffset, curYOffset, curZOffset);
    //Compute the world space position of the current chunk
    float3 actualPosition = viewedChunkCoord * _ChunksBuffer[0].chunkSize;
    

    int chunkIndex = ChunkTypeToIndex(_ChunksBuffer[0].chunkType); //initially this is 4

    //4 = 0 (Intergalactic trigger - should be visible from galactic view)
    //3 = 1 (Galactic trigger - should be visible from solar system view)
    //default = -1 (no trigger beyond intergalactic level or solar system level)


    float dist = length(actualPosition - playerPosition);

    ChunkIdentifier prevCid = _ChunksBuffer[0]; 
    ChunkIdentifier cid;
    cid.pos = actualPosition;
    cid.chunksInViewDist = chunksVisibleInViewDist;
    
    //chunks buffer contains the scale of the chunks being viewed currently
    //Trigger buffer stores the position at which a scale change was made, as well as the camera properties at which the switch was made.
    //TriggerBuffer[0] = Switch from galactic cluster -> galaxy
    //TriggerBuffer[1] = Switch from galaxy -> solar system
    
    
    //Conditions for returning to an upper level

    //TriggerBuffer[0] should store the ChunkIdentifier at which the switch was made from intergalactic -> galactic level.
    //TriggerBuffer[1] should store the ChunkIdentifier at which the switch was made from galactic -> solar system level

    //we can't go up a level if we're already at the top
    

   //Logic for going back up to a higher scale
   if(_ChunksBuffer[0].chunkType < 4)
   {
     float3 playerToTrigger = (chunkIndex == -1) ? playerPosition : _TriggerBuffer[chunkIndex].cid.pos - playerPosition;
     float playerToTriggerDist = length(playerToTrigger);
     float trueSwitchBackDist = ChunkTypeToDistanceMultiplier(_ChunksBuffer[0].chunkType) * lodSwitchBackDist;
     if (playerToTriggerDist > trueSwitchBackDist)
     {
        float3 dir = normalize(playerPosition -_TriggerBuffer[chunkIndex].cid.pos);
        //If the player is behind the trigger point (so do not trigger an lod change if they are simply seeking to explore the level they're currently in)
        if (dot(_TriggerBuffer[chunkIndex].cameraForward, dir) < 0.0)
        {
            if (prevCid.chunkType < 4 && prevCid.chunkType > -1)
            {
                    //If the chunk currently in the buffer equals the currently viewed chunk, do nothing
                cid.pos = float3(currentChunkCoordX, currentChunkCoordY, currentChunkCoordZ) * _ChunksBuffer[0].chunkSize;
                cid.chunksInViewDist = max(_ChunksBuffer[0].chunksInViewDist / 2, chunksVisibleInViewDist); // chunksVisibleInViewDist;
                cid.chunkSize = min(_ChunksBuffer[0].chunkSize * 2, chunkSize);
                cid.chunkType = min(_ChunksBuffer[0].chunkType + 1, 4);

                    
                _ChunksBuffer[0] = cid;

                    //0 - galaxy
                    //1 - solar 
                    
                 _ChunkOffset.Append(id);
                   // We just left a solar system, so now we're in galaxy. So we want to check if chunkIndex + 1.entered (ie, the solar system) is true.
                    //If it's not, which it won't be since we just left it, don't update anything
                _TriggerBuffer[chunkIndex].cid = cid;
                //_TriggerBuffer[chunkIndex].cid.chunkType -= 1; 
                _TriggerBuffer[chunkIndex].cameraForward = -0.1; //invalid direction as the trigger no longer exists
                _TriggerBuffer[chunkIndex].entered = 0u;

                _DispatchBuffer[0] = max(ceil(_ChunksBuffer[0].chunksInViewDist / 8.0), 1);
                _DispatchBuffer[1] = max(ceil(_ChunksBuffer[0].chunksInViewDist / 8.0), 1);

                _DispatchBuffer[2] = max(ceil(_ChunksBuffer[0].chunksInViewDist / 8.0), 1);

            }
        }
     }
   }

    //logic for going down to a lower scale
    
    /*Idea: We don't want to a spawn any bodies on the trigger position, so we don't want the player to be able to drop down a level if they get close enough to a chunk IF
    that chunk is the one currently in the trigger buffer*/
    
    bool chunkIsTrigger = false;
     if (chunkIndex != -1)
    {
        float3 triggerPos = _TriggerBuffer[chunkIndex].cid.pos;
        chunkIsTrigger = (cid.pos.x == triggerPos.x && cid.pos.y == triggerPos.y && cid.pos.z == triggerPos.z);
    }


    if (dist < lodSwitchDist && !chunkIsTrigger)
    {
        
        //If the chunk currently in the buffer equals the currently viewed chunk, do nothing
        if (prevCid.pos.x == cid.pos.x && prevCid.pos.y == cid.pos.y && prevCid.pos.z == cid.pos.z)
        {
            //_Properties.Append(GenerateMeshProperties(actualPosition, 1, 0));
        }
        else if (_ChunksBuffer[0].chunkType && _ChunksBuffer[0].chunkType != 2)
        {
            //Otherwise, we have moved close enough to a new chunk to trigger a level of detail change, so increase the number of threads spawned to accommodate 
            //for the reduced chunk size and increased number of chunks in view.

            cid.chunksInViewDist = min(_ChunksBuffer[0].chunksInViewDist * 2, chunksVisibleInViewDist * 5);
            cid.chunkSize = max(_ChunksBuffer[0].chunkSize / 2, 1);
            cid.chunkType = max(_ChunksBuffer[0].chunkType - 1, 2);
            _ChunksBuffer[0] = cid;
            _DispatchBuffer[0] = min(ceil(cid.chunksInViewDist / 8.0), 64);
            _DispatchBuffer[1] = min(ceil(cid.chunksInViewDist / 8.0), 64);
            _DispatchBuffer[2] = min(ceil(cid.chunksInViewDist / 8.0), 64);
            
            //Cache the location that the user entered the next level of detail

            _TriggerBuffer[chunkIndex + 1].cid = cid;
            //_TriggerBuffer[chunkIndex].cid.chunkType += 1; //If we move a scale level down (eg, galaxies -> stars), then we set the trigger to have a chunk type one more than the current chunk type to signify that we're moving up'
            _TriggerBuffer[chunkIndex + 1].cameraForward = cameraForward;
            _TriggerBuffer[chunkIndex + 1].entered = 1u;
            localSwitch = true;
            for (uint i = 0; i < 6; i++)
            {
                Plane plane = _ViewFrustumPlanes[i];
                _ViewFrustumPlanesAtTrigger[i] = plane;
            }
            
            
        }

    }
    else
    {
        //If we're not close enough to add another chunk to the buffer, then grab whatever ic currently in the buffer'
        if (prevCid.pos.x == -0.1 && prevCid.pos.y == -0.1 && prevCid.pos.z == -0.1 || prevCid.pos.x == cid.pos.x && prevCid.pos.y == cid.pos.y && prevCid.pos.z == cid.pos.z) //if there is currently nothing in the buffer OR we've just moved away from a chunk enough such that we want to drop its level of detail
        {
            //if the chunk we added to the chunk list in our previous frame equals the one we're looking at currently, that means we need to remove it from the buffer as we're no longer close enough to view it
            _ChunksBuffer[0].pos = float3(-0.1, -0.1, -0.1);

        }
        float random = Hash31(actualPosition);


        if(_ChunksBuffer[0].chunkType == 4)
        {
            GalacticCluster gc;
            float random = Hash31(actualPosition);
            float random2 = Hash31(random);


            float scale = lerp(galacticClusterMinMaxRadius.x, galacticClusterMinMaxRadius.y, random);
            if (ShouldCullSphere(actualPosition, scale) == 0u)
                return; // view frustum culling
            float4 colour = lerp(float4(1.0, 0.0, 0.0, 1.0), float4(0.0, 0.0, 1.0, 1.0), random);
            float3 rotation = Hash33(actualPosition) * 2.0 * PI;
            //MeshProperties GenerateMeshProperties(float3 position, float scale, int lodLevel, float4 colour, float fade)
            MeshProperties mp = GenerateMeshProperties(actualPosition, scale, _ChunksBuffer[0].chunkType, colour, 1.0);
            gc.mp = mp;
            gc.maxStarSize = lerp(galacticClusterMinMaxStarSize.x, galacticClusterMinMaxStarSize.y, random);
            gc.numStarLayers = (int)  round(lerp(minMaxNumStarLayers.x, minMaxNumStarLayers.y, random));
            gc.starSpeedMultiplier = lerp(minMaxStarSpeedMultiplier.x, minMaxStarSpeedMultiplier, random);
            gc.gridSize = (int)  round(lerp(minMaxGridSize.x, minMaxGridSize.y, random));
            int randomToIndex = floor(random * 6);
            int randomToIndex2 = floor(random2 * 6);
            if (randomToIndex == randomToIndex2)
            {
                randomToIndex = (randomToIndex + 1) % 6;
            }
            gc.starColour1 = clusterColours[randomToIndex];
            gc.starColour2 = clusterColours[randomToIndex2];
            _GalacticClusterBuffer.Append(gc);
        }

    }

}
