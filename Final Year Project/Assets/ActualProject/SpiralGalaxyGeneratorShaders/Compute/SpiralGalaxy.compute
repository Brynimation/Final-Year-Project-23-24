// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

#include "Assets/ActualProject/Helpers/Utility.hlsl"

RWStructuredBuffer<GalaxyProperties> _MainPropertiesBuffer;
RWStructuredBuffer<uint> _MainPositionBufferCount;
AppendStructuredBuffer<GalaxyStar> _PositionsLODAppend0;
AppendStructuredBuffer<GalaxyStar> _PositionsLODAppend1;
AppendStructuredBuffer<GalaxyStar> _PositionsLODAppend2;
AppendStructuredBuffer<float2> _Radii;
RWStructuredBuffer<uint> _Ids;
RWStructuredBuffer<InstanceData> _PositionsLOD0;
RWStructuredBuffer<InstanceData> _PositionsLOD1;
StructuredBuffer<Plane> _ViewFrustumPlanes;

uniform Texture2D<float> _RadiusLookupTexture;
uniform SamplerState sampler_RadiusLookupTexture;


uniform float _ThresholdDist;
uniform float4 _StandardColour;
uniform float _GalaxyDensity;
uniform float4 _LargeStarRadius;
uniform float4 _SmallStarRadius;
uniform float4 _H2RegionColour;
uniform GalaxyProperties _GalacticProperties;
uniform float _MinEccentricity;
uniform float _MaxEccentricity;
uniform float _GalacticDiskRadius;
uniform float _GalacticHaloRadius;
uniform float _GalacticBulgeRadius;
uniform float _MaxGalacticHaloRadius;
uniform float _Bias;
uniform float _ProportionOfStarsInBulge;
uniform float _ProportionOfStarsInDisk;
uniform int _AngularOffsetMultiplier;
uniform float3 _PlayerPosition;
uniform float _LODSwitchDist;
uniform float _TimeStep;
uniform int _NumParticles;
uniform float4 _CentreColour;
uniform float4 _OuterColour;
uniform float _time;



uint ShouldCullSphere(float3 centre, float radius)
{

    for (uint i = 0; i < 6; i++)
    {
        Plane plane = _ViewFrustumPlanes[i];
        float normalDotCentre = dot(plane.normal, centre);
        float cullDist = plane.distance;
        if (normalDotCentre + cullDist + radius <= 0)
        {
            return 0;
        }
    }
    return 1;
}
/*
This function calculates the current position of a star in its orbit. This requires the star's current angle in its orbit (theta),
the angle of inclination of its orbit (angleOffset), the semi-major (a) and semi-minor (b) axes of the ellipse. Obtained from line 425 from
here: https://github.com/beltoforion/Galaxy-Renderer/blob/master/GalaxyWnd.cpp
        GLfloat fx = (GLfloat)(x + (a * cosalpha * cosbeta - b * sinalpha * sinbeta));
        GLfloat fy = (GLfloat)(y + (a * cosalpha * sinbeta + b * sinalpha * cosbeta));
*/

float3 calculatePosition(float theta, float angleOffset, float a, float b, int id)
{
    float cosTheta = cos(theta);
    float sinTheta = sin(theta);
    float cosOffset = cos(angleOffset);
    float sinOffset = sin(angleOffset);

    float xPos = a * cosTheta * cosOffset - b * sinTheta * sinOffset;
    float yPos = a * cosTheta * sinOffset + b * sinTheta * cosOffset;
    //offset = 0: sinoffset = 0, cosoffset = 1 
    // xPos = aCosTheta - bSintheta
    // yPos = 
    float zPos = 0.0;
    float3 scale = _MainPropertiesBuffer[0].mp.scale;
    float4x4 matNoScale = _MainPropertiesBuffer[0].mp.mat;
    matNoScale[0][0] /= scale.x;
    matNoScale[0][1] /= scale.y;
    matNoScale[0][2] /= scale.z;

    matNoScale[1][0] /= scale.x;
    matNoScale[1][1] /= scale.y;
    matNoScale[1][2] /= scale.z;

    matNoScale[2][0] /= scale.x;
    matNoScale[2][1] /= scale.y;
    matNoScale[2][2] /= scale.z;
    float4 pos = mul(matNoScale, float4(xPos, yPos, zPos, 1.0));
    return pos.xyz;
}

float GetAccurateSemiMajorAxis(uint id)
{
    _Ids[id] = id;
    float p = float(id) / float(_NumParticles - 1);
    float radius = _RadiusLookupTexture.SampleLevel(sampler_RadiusLookupTexture, float2(p, 0.0), 0).r;
    radius *= (_GalacticHaloRadius / _MaxGalacticHaloRadius);
    _Radii.Append(float2(radius, p));
    return radius;
    

}

float GetSemiMajorAxis(float x)
{

    return (x * x * x * _GalacticHaloRadius);
}

float GetEccentricity(float r)
{
    if (r < _GalacticBulgeRadius)
    {
        return lerp(_MaxEccentricity, _MinEccentricity, r / _GalacticBulgeRadius);
    }
    else if (r >= _GalacticBulgeRadius && r < _GalacticDiskRadius)
    {
        return lerp(_MinEccentricity, _MaxEccentricity, (r - _GalacticBulgeRadius) / (_GalacticDiskRadius - _GalacticBulgeRadius));
    }
    else if (r >= _GalacticDiskRadius && r < _GalacticHaloRadius)
    {
        return lerp(_MaxEccentricity, 0.0, (r - _GalacticDiskRadius) / (_GalacticHaloRadius - _GalacticDiskRadius));
    }
    else
    {
        return 0.0;
    }
}



/*Generates a random, initial angle based on the id of the star.*/
float GetRandomAngle(uint id)
{
    return radians((Hash1(id) * 360));
}

float GetExpectedAngularVelocity(uint i, float r)
{
    //One simplifying assumption we make here is that, as the nuclear bulge of the galaxy is very densely packed with stars, we consider it to behave as a 
    //uniformly dense solid sphere.
    //Due to Newton's shell theorem: for a test particle contained within a sphere of constant density, gravitational force (and hence acceleration)
    //increases linearly with distance from the centre (at 0) to the surface of the sphere (at a maximum).  Beyond the sphere, we use Newton's 
    //universal law of gravitation to show that orbital velocity is proportion to 1/sqrt(distance) from the centre of mass, and hence, angular velocity is proportional to 1/distance^(3/2).
    //Here, we make the simplifying assumption that the nuclear bulge is a sphere of constant density that houses the mass of the entire galaxy.
    //We do the lerping so that the transition from the bulge to the disc is more seamless
    float galaxyMass = 4 / 3 * PI * pow(_GalacticBulgeRadius, 3.0) * _GalaxyDensity;
    float discSpeed = sqrt(galaxyMass / pow(r, 3));
    float bulgeSpeed = 5.0; //angular velocity in the bulge is constant.
    float interpolationDist = _GalacticBulgeRadius / 2.0;
    // Calculate a smooth transition factor between bulgeSpeed and discSpeed
    float t = smoothstep(_GalacticBulgeRadius - interpolationDist, _GalacticBulgeRadius, r);

    // Calculate the interpolated speed
    float speed = lerp(bulgeSpeed, discSpeed, t);

    return speed;

    //return sqrt((i * 50)/((_NumParticles - 1) * r)); //angularVel = sqrt(G * mass within the radius r / radius^3)

    //Using Newton's form of Kepler's third law:
    //T = 4
}

/*Determines the angle of inclination of the elliptical orbit. Based on this article: https://beltoforion.de/en/spiral_galaxy_renderer/, by
having the inclination of the orbit increase with the size of the semi-major axis of the orbit, we produce the desired spiral structure of the galaxy*/
float GetAngularOffset(uint id)
{
    int multiplier = id * _AngularOffsetMultiplier;
    int finalParticle = _NumParticles - 1;
    return radians((multiplier / (float) finalParticle) * 360);
}
float3 GetPointOnEllipse(uint id)
{
    float semiMajorAxis = GetAccurateSemiMajorAxis(id); //GetSemiMajorAxis(id/(float)_NumParticles);
    float eccentricity = GetEccentricity(semiMajorAxis);
    float angularVelocity = GetExpectedAngularVelocity(id, semiMajorAxis);
    float semiMinorAxis = semiMajorAxis * sqrt(1.0 - pow(eccentricity, 2));//eccentricity * semiMajorAxis;
    float currentAngularOffset = GetAngularOffset(id);
    float theta = GetRandomAngle(id) + angularVelocity * _time * _TimeStep * 5.0;
    return calculatePosition(theta, currentAngularOffset, semiMajorAxis, semiMinorAxis, id);
}

float4 GetColour(uint id)
{
    float random = Hash21(float2(id, id * 123.42));
    float4 colour = lerp(_CentreColour, _OuterColour, (float) id / (float)_NumParticles);
    return colour;
}

[numthreads(1024, 1, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    if (_MainPositionBufferCount[0] == 0)
        return;
    _GalacticProperties = _MainPropertiesBuffer[0];
    _NumParticles = _GalacticProperties.numParticles;
    if(id.x >= _NumParticles)
    {
        return;
    }

    //Grab all galaxy properties from the buffer - assign to uniform variables so they can be used globally
    float multiplier = _GalacticProperties.mp.scale;
    _GalacticBulgeRadius = _GalacticProperties.galacticBulgeRadius;
    _GalacticDiskRadius = _GalacticProperties.galacticDiskRadius;
    _GalacticHaloRadius = _GalacticProperties.galacticHaloRadius;
    _MinEccentricity = _GalacticProperties.minEccentricity;
    _MaxEccentricity = _GalacticProperties.maxEccentricity;
    _MaxGalacticHaloRadius = _GalacticProperties.maxHaloRadius;
    _AngularOffsetMultiplier = _GalacticProperties.angularOffsetMultiplier;
    _CentreColour = _GalacticProperties.centreColour;
    _OuterColour = _GalacticProperties.outerColour;
    _GalaxyDensity = _GalacticProperties.galaxyDensity;

    float curLargeStarRadius = min(10, multiplier * _LargeStarRadius);
    float curSmallStarRadius = min(5, multiplier * _SmallStarRadius);

    GalaxyStar data;
    data.radius = (id.x % 100) == 0 ? curLargeStarRadius : curSmallStarRadius; //100 : 50;
    data.colour = (id.x % 100) == 0 ? _H2RegionColour : GetColour(id.x);


    float3 posObjectSpace = GetPointOnEllipse(id.x);
    data.position = posObjectSpace;

    //View frustum culling
    float dist = length(posObjectSpace - _PlayerPosition) - data.radius;
    uint inViewFrustum = ShouldCullSphere(posObjectSpace, data.radius);
    if (inViewFrustum == 0)
        return;
    //high lod
    if (dist < _LODSwitchDist)
    {
        _PositionsLODAppend0.Append(data);
    }
    //low lod
    else
    {
        _PositionsLODAppend1.Append(data);
    }
    //dust clouds
    if (id.x % 100 != 0)
    {
        _PositionsLODAppend2.Append(data);
    }

}
